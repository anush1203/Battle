package player;

import weapons.IWeapons;

import java.util.List;

/**
 * A blueprint for creating a player that will be pit into battle.
 */
public interface IPlayer {
  
  /**
   * Name of the player.
   * @return Name of the player.
   */
  public String getName();
  
  /**
   * Sets a player's 4 basic abilities by rolling dice and sets the health as well.
   */
  public void setBaseAbilitiesAndHealth();
  
  /**
   * The base strength of the player generated by rolling dice.
   * @return Strength value.
   */
  public int getStrength();
  
  /**
   * The base Constitution of the player generated by rolling dice.
   * @return Constitution value.
   */
  public int getConstitution();
  
  /**
   * The base Dexterity of the player generated by rolling dice.
   * @return Dexterity value.
   */
  public int getDexterity();
  
  /**
   * The base Charisma of the player generated by rolling dice.
   * @return Charisma value.
   */
  public int getCharisma();

  /**
   * Sum of all the 4 base abilities form the health.
   * @return An integer value for health.
   */
  public int getHealth();
  
  /**
   * Randomly generated 20 items from the bag that are assigned to a player.
   * @return A string that shows the 20 items equipped.
   */
  String allRandomlyAssignedGears();
  
  /**
   * Player details once he/she is equipped with gears that they can carry to battle.
   * @return A string that displays all the details of a player.
   */
  String playerDetailsAfterEquipped();
  
  /**
   * Strength of a player after consuming potions.
   * @return Updated strength value.
   */
  int strengthAfterPotions();
  
  /**
   * Constitution of a player after consuming potions.
   * @return Updated constitution value.
   */
  int constitutionAfterPotions();
  
  /**
   * Dexterity of a player after consuming potions.
   * @return Updated dexterity value.
   */
  int dexterityAfterPotions();
  
  /**
   * Charisma of a player after consuming potions.
   * @return Updated charisma value.
   */
  int charismaAfterPotions();
  
  /**
   * Sum of strengths of all the gears that add to a player's strength.
   * @return Total additional strength offered by the items.
   */
  public int combinedGearStrength();
  
  /**
   * Sum of dexterities of all the gears that add to a player's dexterity.
   * @return Total additional dexterity offered by the items.
   */
  public int combinedGearDexterity();
  
  /**
   * A player can request a weapon from the armory 
   * during the fight.
   * 
   * @param w The weapon that is randomly picked from the armory.
   * @return A randomly picked weapon or weapons in case of katana that is assigned to the player.
   */
  public List<IWeapons> requestWeapon(IWeapons w);
  
  /**
   * setting a player's wearable gears.
   */
  void setPlayerHeadGearAndFootWear();
 
}
